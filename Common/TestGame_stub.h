  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "TestGame_common.h"

     
namespace TestGame {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool SendItems ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const std::vector<Item> & )		{ 
			return false;
		} 

#define DECRMI_TestGame_SendItems bool SendItems ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const std::vector<Item> & items) PN_OVERRIDE

#define DEFRMI_TestGame_SendItems(DerivedClass) bool DerivedClass::SendItems ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const std::vector<Item> & items)
#define CALL_TestGame_SendItems SendItems ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const std::vector<Item> & items)
#define PARAM_TestGame_SendItems ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const std::vector<Item> & items)
               
		virtual bool SendPlayerInfo ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const PlayerInfo & )		{ 
			return false;
		} 

#define DECRMI_TestGame_SendPlayerInfo bool SendPlayerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const PlayerInfo & info) PN_OVERRIDE

#define DEFRMI_TestGame_SendPlayerInfo(DerivedClass) bool DerivedClass::SendPlayerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const PlayerInfo & info)
#define CALL_TestGame_SendPlayerInfo SendPlayerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const PlayerInfo & info)
#define PARAM_TestGame_SendPlayerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const PlayerInfo & info)
               
		virtual bool Move ( ::Proud::HostID, ::Proud::RmiContext& , const int8_t & )		{ 
			return false;
		} 

#define DECRMI_TestGame_Move bool Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int8_t & key) PN_OVERRIDE

#define DEFRMI_TestGame_Move(DerivedClass) bool DerivedClass::Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int8_t & key)
#define CALL_TestGame_Move Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int8_t & key)
#define PARAM_TestGame_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int8_t & key)
               
		virtual bool WhoAmI ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_TestGame_WhoAmI bool WhoAmI ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_TestGame_WhoAmI(DerivedClass) bool DerivedClass::WhoAmI ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_TestGame_WhoAmI WhoAmI ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_TestGame_WhoAmI ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool WhoYouAre ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_TestGame_WhoYouAre bool WhoYouAre ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no) PN_OVERRIDE

#define DEFRMI_TestGame_WhoYouAre(DerivedClass) bool DerivedClass::WhoYouAre ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no)
#define CALL_TestGame_WhoYouAre WhoYouAre ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no)
#define PARAM_TestGame_WhoYouAre ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_SendItems;
		static const PNTCHAR* RmiName_SendPlayerInfo;
		static const PNTCHAR* RmiName_Move;
		static const PNTCHAR* RmiName_WhoAmI;
		static const PNTCHAR* RmiName_WhoYouAre;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const std::vector<Item> & ) > SendItems_Function;
		virtual bool SendItems ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const std::vector<Item> & items) 
		{ 
			if (SendItems_Function==nullptr) 
				return true; 
			return SendItems_Function(remote,rmiContext, player_no, items); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const PlayerInfo & ) > SendPlayerInfo_Function;
		virtual bool SendPlayerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no, const PlayerInfo & info) 
		{ 
			if (SendPlayerInfo_Function==nullptr) 
				return true; 
			return SendPlayerInfo_Function(remote,rmiContext, player_no, info); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int8_t & ) > Move_Function;
		virtual bool Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int8_t & key) 
		{ 
			if (Move_Function==nullptr) 
				return true; 
			return Move_Function(remote,rmiContext, key); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > WhoAmI_Function;
		virtual bool WhoAmI ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (WhoAmI_Function==nullptr) 
				return true; 
			return WhoAmI_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > WhoYouAre_Function;
		virtual bool WhoYouAre ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & player_no) 
		{ 
			if (WhoYouAre_Function==nullptr) 
				return true; 
			return WhoYouAre_Function(remote,rmiContext, player_no); 
		}

	};
#endif

}


